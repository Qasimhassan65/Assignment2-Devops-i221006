version: '3.8'

services:
  # Infrastructure services (databases and message broker)
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-db:
    image: postgres
    container_name: user-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: mc
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mc"]
      interval: 5s
      timeout: 5s
      retries: 5

  booking-db:
    image: postgres
    container_name: booking-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: booking_service
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d booking_service"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Application services (in your specified order)
  user-service:
    build: ./user-service
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
      - DB_HOST=user-db
      - DB_USER=postgres
      - DB_PASSWORD=1234
      - DB_NAME=mc
      - DB_PORT=5432
    depends_on:
      user-db:
        condition: service_healthy
    restart: on-failure

  event-service:
    build: ./event-service
    ports:
      - "5002:5002"
    environment:
      - PORT=5002
      - MONGO_URI=mongodb://mongo:27017/event_service
    depends_on:
      mongo:
        condition: service_healthy
      user-service:
        condition: service_started
    restart: on-failure

  notification-service:
    build: ./notification-service
    ports:
      - "4003:4003"
    environment:
      - PORT=4003
      - RABBITMQ_URL=amqp://rabbitmq
      - MONGO_URI=mongodb://mongo:27017/notifications
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      event-service:
        condition: service_started
    restart: on-failure

  booking-service:
    build: ./booking-service
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - DB_HOST=booking-db
      - DB_USER=postgres
      - DB_PASSWORD=1234
      - DB_NAME=booking_service
      - DB_PORT=5432
      - RABBITMQ_URL=amqp://rabbitmq
      - EVENT_SERVICE_URL=http://event-service:5002
      - PAYMENT_SERVICE_URL=http://payment-service:3003
    depends_on:
      booking-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      notification-service:
        condition: service_started
    restart: on-failure

  frontend:
    build: ./frontend
    ports:
      - "3001:3000"
    depends_on:
      booking-service:
        condition: service_started
    restart: on-failure